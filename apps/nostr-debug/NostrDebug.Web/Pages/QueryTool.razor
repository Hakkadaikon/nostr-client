@page "/query"
@using Nostr.Client.Requests
@using Newtonsoft.Json
@using Nostr.Client.Json
@using System.Text
@inject NavigationManager Navigation

<Stack Orientation="Orientation.Vertical">

    <PageHeader Title="Query Tool" Subtitle="Request data from the connected relay"></PageHeader>
        
    <div class="page-layout">
        
        <NostrFilterSend @bind-Filter="_filter" @bind-Filter:after="OnFilterChanged"></NostrFilterSend>
        <NostrEventTable></NostrEventTable>

    </div>

</Stack>

@code {
    private NostrFilter _filter = new()
    {
        Kinds = new[]
        {
            NostrKind.Metadata,
            NostrKind.ShortTextNote,
            NostrKind.Reaction,
            NostrKind.Contacts,
            NostrKind.RecommendRelay,
            NostrKind.EventDeletion,
            NostrKind.Reporting,
            NostrKind.ClientAuthentication
        },
            Since = DateTimeUtils.UtcNowOnlyHours().AddHours(-12),
            Until = DateTimeUtils.UtcNowOnlyHours().AddHours(4),
            Authors = new[]
        {
            "npub1dd668dyr9un9nzf9fjjkpdcqmge584c86gceu7j97nsp4lj2pscs0xk075",
            "npub1sg6plzptd64u62a878hep2kev88swjh3tw00gjsfl8f237lmu63q0uf63m",
            "npub1qny3tkh0acurzla8x3zy4nhrjz5zd8l9sy9jys09umwng00manysew95gx",
            "npub1dergggklka99wwrs92yz8wdjs952h2ux2ha2ed598ngwu9w7a6fsh9xzpc"
        }
    };

    [Parameter]
    [SupplyParameterFromQuery(Name = "base64")]
    public string? QueryBase64 { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(QueryBase64))
        {
            SerializeFilterToUrl(true);
            return;
        }

        var deserialized = DeserializeFilter(QueryBase64);
        if (deserialized != null)
            _filter = deserialized;
    }

    private void OnFilterChanged()
    {
        SerializeFilterToUrl(false);
    }

    private void SerializeFilterToUrl(bool replace)
    {
        var serialized = SerializeFilter(_filter);
        var newUrl = Navigation.GetUriWithQueryParameter("base64", serialized);
        Navigation.NavigateTo(newUrl, false, replace);
    }

    private static string SerializeFilter(NostrFilter filter)
    {
        var serialized = JsonConvert.SerializeObject(filter, NostrSerializer.Settings);
        var base64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(serialized));
        return base64;
    }

    private static NostrFilter? DeserializeFilter(string filter)
    {
        try
        {
            var filterSerialized = Encoding.UTF8.GetString(Convert.FromBase64String(filter));
            var deserialized = JsonConvert.DeserializeObject<NostrFilter>(filterSerialized, NostrSerializer.Settings);
            return deserialized;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to deserialize filter, error: {e.Message}");
            return null;
        }
    }
}
