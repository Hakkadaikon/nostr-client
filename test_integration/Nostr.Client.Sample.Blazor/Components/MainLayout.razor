@inherits LayoutComponentBase
@inject RelayConnection NostrRelay

<div class="container">
    <div class="siteheader">
        <a class="logo" href="/">
            <p class="logo-text">
                <span>Nostr</span>Debug
            </p>
        </a>
        
        <a class="m-left-auto m-r-3 clear-link cursor-hand menu-link" style="line-height: 44px" @onclick="OnDisplayRelayDialog">
            
            @if (_isRelayConnected)
            {
                <FluentIcon style="vertical-align: middle" Name="@FluentIcons.CloudCheckmark" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Success" />
            }
            else
            {
                <FluentIcon style="vertical-align: middle" Name="@FluentIcons.CloudDismiss" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Error" />
            }
            
            <span class="m-l">Relay</span>

        </a>

        <div class="git-repo clear-link menu-link" style="line-height: 44px">
            <a href="https://github.com/marfusios/nostr-client-websocket" target="_blank">Github Repository</a>
        </div>
    </div>
    <div class="main">
        <div class="navigation">
            <NavMenu />
        </div>

        <div class="content">
            <main>
                <article class="content px-4">
                   
                    <ErrorBoundary>
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent Context="ex">
                            <p class="error">@ex.Message</p>
                        </ErrorContent>
                    </ErrorBoundary>
                </article>
            </main>
        </div>
    </div>
</div>

<FluentDialog @ref="_relayDialog" Modal="true" TrapFocus="false" @ondialogdismiss="OnHideRelayDialog">
    <div class="dialog-content">
        <Relay></Relay>
    </div>
</FluentDialog>

@code {
    private FluentDialog? _relayDialog;
    private bool _isRelayConnected;

    protected override Task OnInitializedAsync()
    {
        _isRelayConnected = NostrRelay.IsConnected;
        NostrRelay.ConnectionStream.Subscribe(connected =>
        {
            _isRelayConnected = connected;
            StateHasChanged();
        });

        return base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            _relayDialog!.Hide();
    }

    private void OnDisplayRelayDialog()
    {
        _relayDialog?.Show();
    }

    private void OnHideRelayDialog(DialogEventArgs? args)
    {
        if (args?.Reason != null && args.Reason == "dismiss")
        {
            _relayDialog!.Hide();
        }
    }
}
