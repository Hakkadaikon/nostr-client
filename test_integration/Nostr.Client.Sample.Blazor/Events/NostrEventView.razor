@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

<div>
    <PageHeader Title3="@Event?.Kind.ToString()" DisplayBrowserTitle="false"></PageHeader>
    @if (Event is NostrMetadataEvent or NostrContactEvent)
    {
        <pre>@FormatEventContent(Event?.Content)</pre>
    }
    else
    {
        <p style="font-size: 18px">@FormatEventContent(Event?.Content)</p>
    }
       
    @if (Event?.Tags?.Any() == true)
    {
        <p>
            <strong>Tags</strong>
            <FluentTreeView>
                
                @foreach (var tag in Event.Tags.GroupBy(x => x.TagIdentifier))
                {
                    <FluentTreeItem>
                        <span>@tag.Key <small>(@tag.SelectMany(x => x.AdditionalData).Count())</small></span>

                        @foreach (var otherTag in tag.SelectMany(x => x.AdditionalData))
                        {
                            <FluentTreeItem>
                                @switch (tag.Key)
                                {
                                    case "e":
                                        <div><a class="clear-link" href="@ExternalLinks.GetLinkToEvent(otherTag?.ToString())" target="_blank">@ExternalLinks.FormatToNote(otherTag?.ToString())</a></div>
                                        break;
                                    case "p":
                                        <div><a class="clear-link" href="@ExternalLinks.GetLinkToProfile(otherTag?.ToString())" target="_blank">@ExternalLinks.FormatToNpub(otherTag?.ToString())</a></div>
                                        break;
                                    default:
                                        <div><span>@otherTag</span></div>
                                        break;
                                }
                            </FluentTreeItem>
                        }

                    </FluentTreeItem>
                }
                    
            </FluentTreeView>
        </p>
    }

    <p>
        <strong>Created at</strong>
        <div>@Event?.CreatedAt?.ToLocalTime().ToString("F")</div>
    </p>
    <p>
        <strong>Id</strong>
        @if (Event?.Kind == NostrKind.ShortTextNote)
        {
            <div>@Event?.Id</div>
            <div><a class="clear-link" href="@ExternalLinks.GetLinkToEvent(Event?.Id)" target="_blank">@ExternalLinks.FormatToNote(Event?.Id)</a></div>
        }
        else
        {
            <div>@Event?.Id</div>
        }
    </p>
    <p>
        <strong>Author</strong>
        <div>@Event?.Pubkey</div>
        <div><a class="clear-link" href="@ExternalLinks.GetLinkToProfile(Event?.Pubkey)" target="_blank">@ExternalLinks.FormatToNpub(Event?.Pubkey)</a></div>
    </p>

</div>

@code {
    [Parameter]
    [Required]
    public NostrEvent? Event { get; set; } = new();

    private static string FormatEventContent(string? content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return string.Empty;

        try
        {
            var parsed = JsonConvert.DeserializeObject<JObject>(content);
            return parsed?.ToString(Formatting.Indented) ?? content;
        }
        catch (Exception)
        {
            return content;
        }
    }
}
