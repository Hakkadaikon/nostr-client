@page "/query"
@using Nostr.Client.Requests
@using Nostr.Client.Responses
@using Nostr.Client.Messages
@using Nostr.Client.Utils
@using System.Reactive.Linq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Nostr.Client.Responses.Contacts
@using Nostr.Client.Responses.Metadata
@using QuickGridPagination = Microsoft.AspNetCore.Components.QuickGrid.PaginationState
@using FluentPagination = Microsoft.Fast.Components.FluentUI.PaginationState;
@inject RelayConnection NostrRelay
@implements IDisposable

<Stack Orientation="Orientation.Vertical">

    <PageHeader Title="Query Tool" Subtitle="Request data from the connected relay"></PageHeader>

    <Stack Orientation="Orientation.Horizontal" HorizontalGap="20">
        
        <div class="filter-form">
            <Stack Orientation="Orientation.Vertical" HorizontalGap="10">
                
                <Stack Orientation="Orientation.Horizontal" VerticalGap="10">
                    
                    <FluentTextField style="width: 100%" Placeholder="" @bind-Value="_subscription">
                        <FluentIcon Name="@FluentIcons.PanelLeftKey" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral Variant="IconVariant.Filled" />
                        <strong>Subscription</strong>
                    </FluentTextField>
                    
                    <FluentButton Appearance="Appearance.Neutral" @onclick="OnCloseSubscription" style="align-self: end">
                        Close
                        <FluentIcon Name="@FluentIcons.Dismiss" Slot="end" Size="@IconSize.Size16" Color="Color.Neutral" />
                    </FluentButton>

                </Stack>
                
                <Stack Orientation="Orientation.Vertical" HorizontalGap="0" VerticalGap="0">
                    <strong>Kinds</strong>
                    
                    <FluentButton Appearance="Appearance.Neutral" @onclick="OnDisplayKinds">
                        <span>@_selectedKindsText</span>
                        @if (_displayKindSelector)
                        {
                            <FluentIcon Name="@FluentIcons.ArrowUp" Slot="end" Size="@IconSize.Size16" Color="Color.Neutral"/>
                        }
                        else
                        {
                            <FluentIcon Name="@FluentIcons.ArrowDown" Slot="end" Size="@IconSize.Size16" Color="Color.Neutral"/>
                        }
                    </FluentButton>


                    @if (_displayKindSelector)
                    {
                        <FluentSelect TOption="NostrKind"
                                      Items="@_allKinds"
                                      Multiple="true"
                                      OptionValue="@(p => p.ToString())"
                                      OptionText="@(p => $"{p.ToString()} [{(int)p}]")"
                                      @bind-SelectedOptions="_selectedKinds">
                        </FluentSelect>
                    }
                </Stack>

                <Stack Orientation="Orientation.Horizontal" VerticalGap="10">
                    
                    <FluentNumberField Value="@_hoursSince" @oninput="SetSince">
                        <strong>Since (hours)</strong>
                    </FluentNumberField>
                
                    <FluentNumberField Value="@_hoursUntil" @oninput="SetUntil">
                        <strong>Until (hours)</strong>
                    </FluentNumberField>
                    
                    <Stack Orientation="Orientation.Vertical" VerticalGap="0">
                        <strong>Selected range (@TimeZoneInfo.Local.StandardName)</strong>
                        <span>from @_filter.Since?.ToString("g")</span>
                        <span>to @_filter.Until?.ToString("g")</span>
                    </Stack>

                </Stack>

                <FluentNumberField Min="0" @bind-Value="_filter.Limit">
                    <strong>Limit</strong>
                </FluentNumberField>

                <FluentTextArea style="width: 100%" Placeholder="hex or npubs" Resize="TextAreaResize.Vertical" @bind-Value="_authorsText">
                    <strong>Authors</strong>
                </FluentTextArea>
                
                <FluentTextArea style="width: 100%" Placeholder="hex or npubs" Resize="TextAreaResize.Vertical" @bind-Value="_idsText">
                    <strong>Ids</strong>
                </FluentTextArea>
                
                <FluentTextArea style="width: 100%" Placeholder="hex or npubs in E tag" Resize="TextAreaResize.Vertical" @bind-Value="_eIdsText">
                    <strong>Ids (E)</strong>
                </FluentTextArea>
                
                <FluentTextArea style="width: 100%" Placeholder="hex or npubs in P tag" Resize="TextAreaResize.Vertical" @bind-Value="_pIdsText">
                    <strong>Ids (P)</strong>
                </FluentTextArea>
                
                <FluentButton Appearance="Appearance.Accent" @onclick="OnSend">
                    Send
                    <FluentIcon Name="@FluentIcons.Send" Slot="end" Size="@IconSize.Size16" Color="Color.Fill" Variant="IconVariant.Filled" />
                </FluentButton>

            </Stack>
            
            <div>
                <FluentDataGrid RowsData="@_events" Pagination="@_pagination" GridTemplateColumns="0.08fr 0.25fr 0.2fr 0.2fr 0.2fr 1fr" RowsDataKey="@(p => p.Id ?? string.Empty)">
                    <Microsoft.Fast.Components.FluentUI.TemplateColumn Class="no-padding">
                        <FluentButton Appearance="Appearance.Neutral" @onclick="@(() => OnDisplayEvent(context))" style="height: auto">
                            ...
                            @*<FluentIcon Name="@FluentIcons.Glasses" Size="@IconSize.Size16" Color="Color.Neutral" Variant="IconVariant.Regular" />*@
                        </FluentButton>
                    </Microsoft.Fast.Components.FluentUI.TemplateColumn>
                    <Microsoft.Fast.Components.FluentUI.PropertyColumn Title="Created" Property="@(p => p.CreatedAt)" Format="HH:mm:ss" Sortable="true"/>
                    <Microsoft.Fast.Components.FluentUI.PropertyColumn Title="Kind" Property="@(p => p.Kind)" Sortable="true"/>
                    <Microsoft.Fast.Components.FluentUI.TemplateColumn Title="Id" Sortable="true">
                        <span>@context.Id[..4]..@context.Id[^4..]</span>
                    </Microsoft.Fast.Components.FluentUI.TemplateColumn>
                    <Microsoft.Fast.Components.FluentUI.TemplateColumn Title="Author" Sortable="true">
                        <span>@context.Pubkey[..4]..@context.Pubkey[^4..]</span>
                    </Microsoft.Fast.Components.FluentUI.TemplateColumn>
                    <Microsoft.Fast.Components.FluentUI.PropertyColumn Title="Content" Property="@(p => p.Content)" Sortable="true"/>
                </FluentDataGrid>
                <FluentPaginator Value="@_pagination" />
                
                <FluentButton Appearance="Appearance.Neutral" @onclick="OnClearEvents">
                    Clear
                    <FluentIcon Name="@FluentIcons.Delete" Slot="end" Size="@IconSize.Size16" Color="Color.Neutral" />
                </FluentButton>

                <FluentDialog @ref="_eventDialog" Modal="true" TrapFocus="true" @ondialogdismiss="OnHideEvent">
                    <div class="dialog-content">
                        <PageHeader Title3="@_selectedEvent?.Kind.ToString()" DisplayBrowserTitle="false"></PageHeader>
                        @if (_selectedEvent is NostrMetadataEvent or NostrContactEvent)
                        {
                            <pre>@FormatEventContent(_selectedEvent?.Content)</pre>
                        }
                        else
                        {
                            <p style="font-size: 18px">@FormatEventContent(_selectedEvent?.Content)</p>
                        }
                        
                        <p>
                            <strong>Id</strong>
                            @if (_selectedEvent?.Kind == NostrKind.ShortTextNote)
                            {
                                <div><a class="clear-link" href="https://snort.social/e/@FormatToNote(_selectedEvent?.Id)" target="_blank">@FormatToNote(_selectedEvent?.Id)</a></div>
                            }
                            else
                            {
                                <div>@_selectedEvent?.Id</div>
                            }
                        </p>
                        <p>
                            <strong>Author</strong>
                            <div>@_selectedEvent?.Pubkey</div>
                            <div><a class="clear-link" href="https://snort.social/p/@FormatToNpub(_selectedEvent?.Pubkey)" target="_blank">@FormatToNpub(_selectedEvent?.Pubkey)</a></div>
                        </p>
                    </div>
                </FluentDialog>
            </div>
            
            @*<div>
                <QuickGrid Items="@_events" Pagination="@_pagination">
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Created" Property="@(p => p.CreatedAt)" Format="MM-dd HH:mm:ss" Sortable="true" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Kind" Property="@(p => p.Kind)" Sortable="true" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Id" Property="@(p => p.Id)" Sortable="true" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Author" Property="@(p => p.Pubkey)" Sortable="true" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Content" Property="@(p => p.Content)" Sortable="true" />
                </QuickGrid>
                
                <Paginator Value="@_pagination" />
            </div>*@

        </div>

    </Stack>

</Stack>

@code {
    private FluentDialog? _eventDialog;
    private NostrEvent? _selectedEvent;

    private string _subscription = "timeline:something";

    private readonly NostrKind[] _allKinds = Enum.GetValues(typeof(NostrKind)).Cast<NostrKind>().ToArray();
    private bool _displayKindSelector;
    private IEnumerable<NostrKind>? _selectedKinds =  new[]
    {
        NostrKind.Metadata,
        NostrKind.ShortTextNote,
        NostrKind.Reaction,
        NostrKind.Contacts,
        NostrKind.RecommendRelay,
        NostrKind.EventDeletion,
        NostrKind.Reporting,
        NostrKind.ClientAuthentication
    };
    private string _selectedKindsText = string.Empty;

    private readonly NostrFilter _filter = new()
    {
        Since = DateTime.Now.AddHours(-12),
        Until = DateTime.Now.AddHours(4),
        Authors = new []
        {
            "npub1sg6plzptd64u62a878hep2kev88swjh3tw00gjsfl8f237lmu63q0uf63m",
            "npub1qny3tkh0acurzla8x3zy4nhrjz5zd8l9sy9jys09umwng00manysew95gx",
            "npub1dergggklka99wwrs92yz8wdjs952h2ux2ha2ed598ngwu9w7a6fsh9xzpc"
        }
    };

    private string? _authorsText;
    private string? _idsText;
    private string? _eIdsText;
    private string? _pIdsText;
    private int _hoursSince = -12;
    private int _hoursUntil = 4;

    private readonly HashSet<NostrEvent> _receivedEvents = new();
    private IQueryable<NostrEvent> _events = Array.Empty<NostrEvent>().AsQueryable();
    private readonly FluentPagination _pagination = new() { ItemsPerPage = 15 };

    private IDisposable? _websocketHandler;

    public void Dispose()
    {
        _websocketHandler?.Dispose();
    }

    protected override void OnInitialized()
    {
        _websocketHandler = NostrRelay.Client.Streams.EventStream
            .Buffer(TimeSpan.FromSeconds(1))
            .Subscribe(HandleEvent);

        // push default authors into input element
        _authorsText = string.Join(Environment.NewLine, _filter.Authors ?? Array.Empty<string>());
        TransformSelectedKinds();

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            _eventDialog!.Hide();
    }

    private void HandleEvent(IList<NostrEventResponse> response)
    {
        var events = response
            .Where(x => x.Event != null)
            .Select(x => x.Event!);
            //.Select(x => new NostrEventView(x.CreatedAt, x.Kind, x.Id, x.Pubkey, x.Content));
        foreach (var evView in events)
        {
            _receivedEvents.Add(evView);
        }
        _events = _receivedEvents.AsQueryable();
        StateHasChanged();
    }

    private void OnSend()
    {
        Console.WriteLine($"Sending filter to {NostrRelay.Communicator.Url.Host}");

        _filter.Kinds = _selectedKinds?.ToArray();
        _filter.Authors = ConvertTextIds(_authorsText);
        _filter.Ids = ConvertTextIds(_idsText);
        _filter.E = ConvertTextIds(_eIdsText);
        _filter.P = ConvertTextIds(_pIdsText);

        NostrRelay.Client.Send(new NostrRequest(_subscription, _filter));
    }

    private void OnCloseSubscription()
    {
        Console.WriteLine($"Sending subscription '{_subscription}' close to {NostrRelay.Communicator.Url.Host}");

        NostrRelay.Client.Send(new NostrCloseRequest(_subscription));
    }

    private void OnBackgroundClick()
    {
        _displayKindSelector = false;
        TransformSelectedKinds();
    }

    private void OnDisplayKinds()
    {
        _displayKindSelector = !_displayKindSelector;
        TransformSelectedKinds();
    }

    private void TransformSelectedKinds()
    {
        _selectedKindsText = _selectedKinds == null ? 
            string.Empty : 
            string.Join(", ", _selectedKinds.Cast<int>().OrderBy(x => x));
    }

    private void SetSince(ChangeEventArgs args)
    {
        _hoursSince = Convert.ToInt32(args.Value);
        _filter.Since = DateTime.Now.AddHours(_hoursSince);
    }

    private void SetUntil(ChangeEventArgs args)
    {
        _hoursUntil = Convert.ToInt32(args.Value);
        _filter.Until = DateTime.Now.AddHours(_hoursUntil);
    }

    private string[]? ConvertTextIds(string? text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return null;
        return text
            .Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries)
            .Select(TryConvertBech32)
            .ToArray();
    }

    private string TryConvertBech32(string key)
    {
        if (string.IsNullOrWhiteSpace(key))
        {
            return key;
        }

        try
        {
            return NostrConverter.ToHex(key, out _) ?? key;
        }
        catch (Exception e)
        {
            return key;
        }
    }

    private void OnDisplayEvent(NostrEvent ev)
    {
        _selectedEvent = ev;
        _eventDialog?.Show();
    }

    private void OnHideEvent(DialogEventArgs? args)
    {
        if (args?.Reason != null && args.Reason == "dismiss")
        {
            _eventDialog!.Hide();
        }
    }

    private void OnClearEvents()
    {
        _receivedEvents.Clear();
        _events = _receivedEvents.AsQueryable();
    }

    private static string FormatEventContent(string? content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return string.Empty;

        try
        {
            var parsed = JsonConvert.DeserializeObject<JObject>(content);
            return parsed?.ToString(Formatting.Indented) ?? content;
        }
        catch (Exception)
        {
            return content;
        }
    }

    private static string? FormatToNpub(string? hexKey) => FormatToBech32(hexKey, "npub");
    private static string? FormatToNote(string? hexKey) => FormatToBech32(hexKey, "note");

    private static string? FormatToBech32(string? hexKey, string hrp)
    {
        try
        {
            return NostrConverter.ToBech32(hexKey, hrp);
        }
        catch (Exception)
        {
            return string.Empty;
        }
    } 
}