@page "/relay"
@inject RelayConnection NostrRelay

<Stack Orientation="Orientation.Vertical" VerticalGap="40">

    <PageHeader Title="Relay" Subtitle="Connect to any Nostr relay"></PageHeader>

    <Stack Orientation="Orientation.Horizontal" HorizontalGap="20">
        
        @if (NostrRelay.IsConnected)
        {
            <FluentIcon Name="@FluentIcons.Globe" Size="@IconSize.Size32" Variant="@IconVariant.Regular" Color="@Color.Success" style="align-self: end" />
        }
        else
        {
            <FluentIcon Name="@FluentIcons.Globe" Size="@IconSize.Size32" Variant="@IconVariant.Regular" Color="@Color.Error" style="align-self: end" />
        }

        <FluentCombobox Items="@RelayConnection.DefaultRelays" @bind-Value="_selectedRelayUrl" Disabled="@NostrRelay.IsConnecting"></FluentCombobox>
    
        @if (NostrRelay.IsConnecting)
        {
            <FluentButton Appearance="Appearance.Neutral" style="align-self: end" @onclick="OnDisconnect">
                Disconnect
                <FluentIcon Name="@FluentIcons.CloudDismiss" Slot="start" Size="@IconSize.Size16" Color="Color.Neutral" />
            </FluentButton>
        }
        else
        {
            <FluentButton Appearance="Appearance.Accent" style="align-self: end" @onclick="OnConnect">
                Connect
                <FluentIcon Name="@FluentIcons.CloudCheckmark" Slot="start" Size="@IconSize.Size16" Variant="IconVariant.Regular" Color="Color.Fill" />
            </FluentButton>
        }

    </Stack>

    <div>
        <div>
            <pre>Received messages: @_receivedMessagesCount</pre>
        </div>
        
        <h4>History</h4>

        <ul>
            @foreach (var item in _history.ToArray().Reverse())
            {
                <li>
                    <span>@item</span>
                </li>
            }
        </ul>
    </div>

</Stack>

@code {
    private string _selectedRelayUrl = string.Empty;
    private readonly List<string> _history = new();

    private int _receivedMessagesCount;

    protected override void OnInitialized()
    {
        _selectedRelayUrl = NostrRelay.RelayUrl;

        NostrRelay.HistoryStream.Subscribe(OnHistory);
        NostrRelay.Communicator.MessageReceived.Subscribe(_ =>
        {
            _receivedMessagesCount++;
            StateHasChanged();
        });

        base.OnInitialized();
    }

    private async Task OnConnect()
    {
        _receivedMessagesCount = 0;
        _selectedRelayUrl = _selectedRelayUrl.Replace(" ", string.Empty).Trim();
        await NostrRelay.Connect(_selectedRelayUrl);
    }

    private async Task OnDisconnect()
    {
        await NostrRelay.Disconnect();
    }

    private void OnHistory(string item)
    {
        _history.Add(item);
        StateHasChanged();
    }

}
